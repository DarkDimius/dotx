#!/usr/bin/env python
import os, sys, httplib2, pprint, webbrowser, logging, subprocess, traceback, tempfile, datetime
from apiclient.discovery import build
from apiclient.http import MediaFileUpload
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.file import Storage
logging.basicConfig()

alfred = "--alfred" in sys.argv
sys.argv = filter(lambda arg: not arg.startswith("--"), sys.argv)
if len(sys.argv) != 2: print("usage: " + sys.argv[0] + " list|create [--alfred]"); exit(1)
action = sys.argv[1]

def get_drive_service():
  CLIENT_ID = open(os.path.expandvars("$GOOGLE_CLIENT_ID")).read().strip()
  CLIENT_SECRET = open(os.path.expandvars("$GOOGLE_CLIENT_SECRET")).read().strip()
  OAUTH_SCOPE = 'https://www.googleapis.com/auth/drive'
  REDIRECT_URI = 'urn:ietf:wg:oauth:2.0:oob'
  flow = OAuth2WebServerFlow(CLIENT_ID, CLIENT_SECRET, OAUTH_SCOPE, REDIRECT_URI)

  storage = Storage(os.path.expandvars("$GOOGLE_OAUTH_STORAGE"))
  credentials = storage.get()
  if not credentials:
    webbrowser.open(flow.step1_get_authorize_url())
    OAUTH_CODE = raw_input("Enter the code provided on the web page: ")
    credentials = flow.step2_exchange(OAUTH_CODE)
    storage.put(credentials)
  http = httplib2.Http()
  http = credentials.authorize(http)
  return build('drive', 'v2', http=http)

today = datetime.date.today()
next_meeting = today + datetime.timedelta((8 - today.weekday()) % 7)
next_meeting_title = "Reflection Meeting %04d-%02d-%02d" % (next_meeting.year, next_meeting.month, next_meeting.day)

drive_service = get_drive_service()
if drive_service:
  if action == "list":
    response = drive_service.files().list(q="title contains 'Reflection Meeting'").execute()
    # pprint.pprint(response)
    docs = map(lambda doc: {"title": doc["title"].replace("/", "-"), "url": doc["alternateLink"]}, response["items"])
    docs = sorted(docs, key=lambda doc: doc["title"], reverse=True)
    if not filter(lambda doc: doc["title"] == next_meeting_title, docs):
      docs.insert(0, {"title": next_meeting_title, "url": ""})
    if alfred:
      text = u"""
      <item arg="%(url)s" uid="%(title)s" valid="yes">
        <title>%(title)s</title>
        <subtitle></subtitle>
        <icon>doc.png</icon>
      </item>
      """
      print ("<items>%s</items>" % "\n".join(text % doc for doc in docs)).encode("ascii", "xmlcharrefreplace")
    else:
      for doc in docs: print doc
  elif action == "create":
    folder = open(os.path.expandvars("$GOOGLEDOCS_SCALA_SHARED")).read().strip()
    hlocal, FILENAME = tempfile.mkstemp(".txt", next_meeting_title + ".")
    os.write(hlocal, " ")
    media_body = MediaFileUpload(FILENAME, mimetype='text/plain', resumable=True)
    response = drive_service.files().insert(
      body={"title": next_meeting_title, "mimeType": "text/plain", "parents": [{"id": folder}]},
      media_body=media_body,
      convert=True
    ).execute()
    print response["alternateLink"]
  else:
    print "Unknown action: " + str(action)
    sys.exit(1)
else:
  sys.exit(1)
