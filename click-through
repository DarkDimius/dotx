#!/usr/bin/env python
import sys, re, os
from subprocess import call, check_output, Popen

if len(sys.argv) != 6:
  print "usage: " + sys.argv[0] + " <file name> <line number> <text before click> <text after click> <cwd>"
  sys.exit(1)

file_name = sys.argv[1]
line_number = sys.argv[2]
before_click = sys.argv[3]
after_click = sys.argv[4]
cwd = sys.argv[5] or "."

def find(root, name):
  # NOTE: find is too slow - I got too spoiled by Sublime
  # names = check_output(["find", root, "-path", "*" + name]).strip().split("\n")
  # if len(names) == 1: return names[0]
  for dir_name in os.listdir(root):
    candidate = os.path.join(root, dir_name, name)
    # open("/Users/xeno_by/log.txt", "a").write(candidate + "\n")
    # open("/Users/xeno_by/log.txt", "a").write(str(os.path.exists(candidate)) + "\n")
    # call(["terminal-notifier", "-message", candidate])
    if os.path.exists(candidate):
      return candidate

def subl(full_name, line_number, force_file):
  if full_name:
    if os.path.isdir(full_name) and force_file:
      for file in os.listdir(full_name):
        call(["/usr/local/bin/subl", os.path.join(full_name, file)], cwd = cwd)
      sys.exit(0)
    else:
      command = full_name + ":" + line_number if line_number else full_name
      call(["/usr/local/bin/subl", command], cwd = cwd)
      sys.exit(0)

def subl_file(full_name, line_number):
  subl(full_name, line_number, force_file = True)

def subl_file_or_dir(full_name, line_number):
  subl(full_name, line_number, force_file = False)

def find_then_subl_file(root, qualified_name, line_number):
  full_name = find(root, qualified_name)
  subl_file(full_name, line_number)

def goto_commit(sha):
  user, repo, branch, status = check_output(["/usr/local/bin/hub-introspect"], cwd = cwd).strip().split("\n")
  import webbrowser
  webbrowser.open("http://github.com/" + user + "/" + repo + "/commit/" + sha)
  sys.exit(0)

def partest_diff(test_name):
  call(["/usr/local/bin/partest-diff", test_name], cwd = cwd)
  sys.exit(0)

cut_prefix = before_click.rfind("\ ") + 1
prefix = before_click[cut_prefix:]
cut_suffix = after_click.find("\ ") if after_click.find("\ ") != -1 else len(after_click)
suffix = after_click[0:cut_suffix]
line = (prefix + suffix).replace("\(", "(").replace("\)", ")").strip()
# call(["/usr/local/bin/terminal-notifier", "-message", line])

# CASE 1: CLICK ON EXISTING FILENAME
if os.path.isabs(file_name) and os.path.exists(file_name):
  subl_file_or_dir(file_name, line_number)

# CASE 2: CLICK ON SOMETHING THAT LOOKS LIKE FAILED TEST
test_prefixes = ["neg", "pos", "run"]
if filter(lambda prefix: line.startswith(prefix + "/") or line.startswith("\[...\]/files/" + prefix + "/"), test_prefixes):
  scala_root = check_output(["/usr/local/bin/scala-root"], cwd = cwd).strip()
  if line.startswith("\[...\]"):
    file_name = line[len("\[...\]") + 1:]
    file_name = os.path.join(scala_root, "test", file_name)
  else:
    file_name = os.path.join(scala_root, "test", "files", line)
  if os.path.isabs(file_name) and os.path.exists(file_name):
    subl_file(file_name, line_number)

# CASE 3: CLICK ON SOMETHING THAT LOOKS LIKE TEST FAILURE
if line == "\[output" or line == "differs\]" or line == "\[compilation" or line == "\[test" or line == "failed\]" or line == "\[FAILED\]" or line == "\[non-zero" or line == "exit" or line == "code\]":
  cut_prefix = before_click.rfind("\!\!") + 4
  test_name = before_click[cut_prefix:]
  cut_prefix = test_name.rfind("-\ ") + 3
  test_name = test_name[cut_prefix:]
  cut_suffix = test_name.find("\ ")
  test_name = test_name[0:cut_suffix]
  partest_diff(test_name)
if line == "\!\!":
  cut_prefix = after_click.find("\ -\ ") + 5
  test_name = after_click[cut_prefix:]
  cut_suffix = test_name.find("\ ")
  test_name = test_name[0:cut_suffix]
  partest_diff(test_name)

# CASE 4: CLICK ON SOMETHING THAT LOOKS LIKE SHA
m = re.match("^[0123456789abcdefABCDEF]+$", line)
if m: goto_commit(line)

# CASE 5: CLICK ON STACK TRACE
m = re.match("^(?P<package>.*)\.(?P<class>.*?)\.(?P<method>.*?)\((?P<file>.*):(?P<line>\d+)\)$", line)
if m:
  qualified_name = os.path.join(m.group("package").replace(".", os.sep), m.group("file"))
  if line.startswith("org.scalalang.macroparadise"):
    git_root = check_output(["/usr/local/bin/git-root"], cwd = cwd).strip()
    plugin_src_root = os.path.join(git_root, "plugin", "src", "main")
    find_then_subl_file(plugin_src_root, qualified_name, m.group("line"))
  else:
    scala_root = check_output(["/usr/local/bin/scala-root"], cwd = cwd).strip()
    find_then_subl_file(os.path.join(scala_root, "src"), qualified_name, m.group("line"))
