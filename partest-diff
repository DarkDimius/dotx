#!/usr/bin/env python
import os, sys, subprocess, re

if len(sys.argv) != 2:
  print "usage: " + sys.argv[0] + " <fuzzy name or index in .partest or plain filename>"
  sys.exit(1)

needle = sys.argv[1]

root = subprocess.Popen(["scala-root"], stdout=subprocess.PIPE).communicate()[0][:-1]
script = subprocess.Popen(["partest-lookup", needle], stdout=subprocess.PIPE)
output = script.communicate()[0][:-1]
if script.returncode != 0:
  plain_filename = needle if needle.startswith("/") else os.path.join(root, "test/files", needle)
  if os.path.exists(plain_filename):
    output = needle
  else:
    print output
    sys.exit(script.returncode)

if output.endswith("/"): output = output[:-1]
test = root + "/test/files/" + output
base, ext = os.path.splitext(test)
flavor = os.path.basename(os.path.dirname(base))
checkfile = base + ".check"
logfile = base + "-" + flavor + ".log"

if flavor == "scalacheck":
  for line in open(logfile).readlines():
    if line.startswith("+ "): continue
    print line.strip()
elif flavor == "scalap":
  checkfile_special = os.path.join(base, "result.test")
  checkfile = checkfile_special if os.path.exists(checkfile_special) else checkfile
  subprocess.call(["bash", "-c", "araxisopendiff " + logfile + " " + checkfile + " &"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
else:
  # if not os.path.exists(checkfile):
  #   with file(checkfile, 'a'):
  #     os.utime(checkfile, None)
  # subprocess.call(["bash", "-c", "diffmerge " + logfile + " " + checkfile + " &"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  subprocess.call(["bash", "-c", "araxisopendiff " + logfile + " " + checkfile + " &"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
