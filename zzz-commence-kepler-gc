#!/usr/bin/env python
import sys, os, re, time
from subprocess import check_output, call

manual = "--manual" in sys.argv
sys.argv = filter(lambda arg: not arg.startswith("--"), sys.argv)

def yesno():
  import sys, tty, termios
  fd = sys.stdin.fileno()
  old_settings = termios.tcgetattr(fd)
  try:
      tty.setraw(sys.stdin.fileno())
      ch = sys.stdin.read(1)
  finally:
      termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
  if ch == "\x03":
    print "^C"
    sys.exit(1)
  elif ch == "y" or ch == "n":
    print ch
    return ch == "y"
  else:
    return yesno()

if len(sys.argv) > 1:
  print "usage: " + sys.argv[0]
  sys.exit(1)

proto_full_branch = check_output(["hack-prototype"]).strip()
proto_short_branch = proto_full_branch[len("scalamacros:"):]
proto = check_output(["hack-home", proto_full_branch]).strip()
call(["git", "remote", "update"], cwd = proto)
def postprocess(branch):
  branch = branch.strip()
  if "*" in branch: return None
  if "->" in branch: return None
  if branch.startswith("remotes/origin/backup"): return branch[len("remotes/origin/"):]
  if branch.startswith("remotes/origin/zzz"): return branch[len("remotes/origin/"):]
  if branch.startswith("remotes/origin/") and manual:
    short_name = branch[len("remotes/origin/"):]
    if short_name == "master": return None
    if short_name == "paradise/macros": return None
    if short_name == "paradise/macros210": return None
    if short_name == "pullrequest/paradise": return None
    if short_name == "backport/paradise": return None
    sys.stdout.write("Garbage? " + short_name + " (y/n) ")
    return short_name if yesno() else None
  return None
garbage = check_output(["git", "branch", "-a"], cwd = proto).strip().split("\n")
garbage = map(postprocess, garbage)
garbage = filter(lambda branch: branch != None, garbage)
print "Garbage branches: " + str(garbage)

if garbage:
  sys.stdout.write("I am about to perform destructive operations. Continue? (y/n) ")
  if yesno():
    for branch in garbage:
      print "git push origin :" + branch
      call(["git", "push", "origin", ":" + branch], cwd = proto)
