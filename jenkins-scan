#!/usr/bin/env python
from subprocess import call
import os, sys, re, json, urllib2, traceback, time

if len(sys.argv) > 2:
  print "usage: " + sys.argv[0] + " [-v]"
  sys.exit(1)

verbose = len(sys.argv) > 1 and sys.argv[1] == "-v"
last_time = time.time()
def checkpoint(message):
  global last_time
  delta = time.time() - last_time
  last_time = time.time()
  if verbose:
    print str(message) + ": " + str(delta)

try:
  with open(os.path.expandvars("$HOME/.jenkins"), "r") as f:
    config = json.load(f)
except Exception as e:
  config = {}
if not config.get("servers"): config["servers"] = []
if not config.get("jobs"): config["jobs"] = []

for server in config["servers"]:
  try:
    if not server.get("lastBuildNumber"): server["lastBuildNumber"] = 0
    data = urllib2.urlopen(server["url"] + "/api/json").read()
    data = json.loads(data)
    actual = data["lastBuild"]["number"]
    expected = server["lastBuildNumber"]
    if actual > expected:
      jobs = filter(lambda datum: datum["number"] > expected, data["builds"])
      jobs = map(lambda datum: datum["url"], jobs)
      for job in jobs:
        data = urllib2.urlopen(job + "/api/json").read()
        data = json.loads(data)
        parameters = next((action for action in data["actions"] if action.get("parameters")), None)
        if parameters:
          githubUsername = next((param for param in parameters["parameters"] if param["name"] == "githubUsername"), None)
          if githubUsername and githubUsername["value"] == "scalamacros":
            config["jobs"].append(job)
            print "Tracking " + job
      server["lastBuildNumber"] = actual
    checkpoint(server["url"])
  except:
    checkpoint(server["url"])
    _, value, _ = sys.exc_info()
    print str(server) + ": " + str(value)

pending_jobs = set(config["jobs"])
config["jobs"] = []
anything_new = False
for job in pending_jobs:
  if job:
    try:
      data = urllib2.urlopen(job + "/api/json").read()
      data = json.loads(data)
      result = data["result"]
      if result:
        anything_new = True
        call(["jenkins-callback", job, result])
      else:
        failures = subprocess.Popen(["jenkins-failures", job], stdout=subprocess.PIPE).communicate()[0].splitlines()
        if failures:
          anything_new = True
          call(["jenkins-callback", job, "FAILURE"])
        else:
          config["jobs"].append(job)
      checkpoint(job)
    except:
      checkpoint(job)
      _, value, _ = sys.exc_info()
      print job + ": " + str(value)
      config["jobs"].append(job)

if not anything_new:
  print "Nothing new"

with open(os.path.expandvars("$HOME/.jenkins"), "w") as f:
  json.dump(config, f, sort_keys=True, indent=4)
