#!/usr/bin/env python
import os, sys, re, json, urllib2, traceback, time
from subprocess import call, Popen, PIPE

if len(sys.argv) > 2:
  print "usage: " + sys.argv[0] + " [-v]"
  sys.exit(1)

verbose = len(sys.argv) > 1 and sys.argv[1] == "-v"
last_time = time.time()
def checkpoint(message):
  global last_time
  delta = time.time() - last_time
  last_time = time.time()
  if verbose:
    print str(message) + ": " + str(delta)

try:
  with open(os.path.expandvars("$HOME/.jenkins"), "r") as f:
    config = json.load(f)
except Exception as e:
  config = {}
if not config.get("servers"): config["servers"] = []
if not config.get("jobs"): config["jobs"] = []

def jenkins_build_parameters(data):
  action = next((action for action in data["actions"] if action.get("parameters")), None)
  if action:
    params = {}
    for param in action["parameters"]:
      params[param["name"]] = param["value"]
    return params

def github_branch_from_jenkins(data):
  parameters = jenkins_build_parameters(data) or {}
  if parameters.get("pullrequest"):
    data = urllib2.urlopen("https://api.github.com/repos/scala/scala/pulls/" + parameters["pullrequest"]).read()
    data = json.loads(data)
    if verbose: print "Branch: " + str(data["head"]["label"])
    return data["head"]["label"]
  elif parameters.get("githubUsername"):
    branch = parameters["githubUsername"] + ":" + parameters["branch"]
    if verbose: print "Branch: " + str(branch)
    return branch

for server in config["servers"]:
  try:
    if not server.get("lastBuildNumber"): server["lastBuildNumber"] = 0
    data = urllib2.urlopen(server["url"] + "/api/json").read()
    data = json.loads(data)
    actual = data["lastBuild"]["number"]
    expected = server["lastBuildNumber"]
    if actual > expected:
      jobs = filter(lambda datum: datum["number"] > expected, data["builds"])
      jobs = map(lambda datum: datum["url"], jobs)
      if verbose: print "\n".join(map(lambda job: "Enqueuing " + job, jobs))
      config["jobs"] += jobs
      server["lastBuildNumber"] = actual
    checkpoint(server["url"])
  except:
    checkpoint(server["url"])
    _, value, _ = sys.exc_info()
    print str(server) + ": " + str(value)

pending_jobs = set(config["jobs"])
config["jobs"] = []
something_new = False
for job in pending_jobs:
  if job:
    try:
      if verbose: print "Processing " + job
      data = urllib2.urlopen(job + "/api/json").read()
      data = json.loads(data)
      branch = github_branch_from_jenkins(data)
      if branch:
        result = data["result"]
        failures = Popen(["jenkins-failures", job], stdout=PIPE).communicate()[0].splitlines()
        if failures: result = "FAILURE"
        if result:
          something_new = True
          msg = result + ": " + job
          script = Popen(["hack-home", branch], stdout=PIPE)
          root = script.communicate()[0][:-1]
          if script.returncode == 0 and os.path.exists(root):
            call(["terminal-notifier", "-title", "Jenkins", "-message", msg, "-open", job])
            print msg
            if result == "FAILURE":
              if failures:
                dotpartest = root + "/.partest"
                tests = []
                if os.path.exists(dotpartest):
                  with open(dotpartest, "r") as f:
                    tests = map(lambda test: test.strip(), f.readlines())
                def comment_out(test):
                  return "# " + test if test.strip() else test
                tests = map(comment_out, tests)
                if len(tests): tests = tests + [""]
                tests += ["# imported from " + job]
                tests += ["# timestamp: " + time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())]
                tests += failures
                with open(dotpartest, "w") as f:
                  f.writelines(map(lambda test: test + "\n", tests))
                print "Imported " + str(len(failures)) + " failing tests into " + dotpartest
              else:
                print "No partest failures found, skipping partest import"
          else:
            print "No hack home for " + branch + ", ignoring"
        else:
          config["jobs"].append(job)
      checkpoint(job)
    except:
      checkpoint(job)
      _, value, _ = sys.exc_info()
      print job + ": " + str(value)
      config["jobs"].append(job)

if not something_new:
  print "Nothing new"

with open(os.path.expandvars("$HOME/.jenkins"), "w") as f:
  json.dump(config, f, sort_keys=True, indent=4)
