#!/usr/bin/env python
import os, sys, subprocess, re, shutil
from subprocess import check_output

if len(sys.argv) != 3:
  print "usage: " + sys.argv[0] + " {--view|--edit|--export} <fuzzy name or index in .partest>"
  sys.exit(1)

action = sys.argv[1]
view = action == "--view"
edit = action == "--edit"
export = action == "--export"
fuzzy = sys.argv[2]

root = subprocess.Popen(["scala-root"], stdout=subprocess.PIPE).communicate()[0][:-1]
sandbox = os.path.join(root, "sandbox")

script = subprocess.Popen(["partest-lookup", fuzzy], stdout=subprocess.PIPE)
output = script.communicate()[0][:-1]
if script.returncode != 0:
  print output
  sys.exit(script.returncode)

test = root + "/test/files/" + output
base, ext = os.path.splitext(test)

if export: # TODO: backup
  if not os.path.exists(sandbox): os.mkdir(sandbox)
  for whatever in os.listdir(sandbox):
    whatever = os.path.join(sandbox, whatever)
    if os.path.isdir(whatever): shutil.rmtree(whatever)
    else: os.remove(whatever)

def process(filename):
  if export:
    targetname = os.path.basename(filename)
    targetname = re.sub("^(.*?)_(\d+)\.scala$", r"\1.scala", targetname)
    if targetname == "Impls.scala": targetname = "Macros.scala"
    elif targetname == "Macros_Test.scala": targetname = "Test.scala"
    else: targetname = "Test.scala"
    full_targetname = os.path.join(sandbox, targetname)
    shutil.copyfile(filename, full_targetname)
    relative_filename = os.path.join(os.path.basename(base), os.path.basename(filename))
    print "exported " + relative_filename + " => " + targetname
  elif edit:
    subprocess.call(["subl", filename])
  else:
    print "=================="
    print filename
    print "=================="
    with open(filename, "r") as f: print f.read().strip()

if os.path.exists(base): # dir
  for filename in os.listdir(base):
    process(os.path.join(base, filename))
elif os.path.exists(base + ".scala"):
  process(base + ".scala")
