#!/usr/bin/env python
import sys, os, filecmp, difflib, shutil, time
from subprocess import check_call

root = "/Users/xeno_by/Projects/pp-2012-simulation-grades"
backup_dir = "/Users/xeno_by/Projects/pp-2012-blueprint"
donnee_dir = "/Users/xeno_by/Projects/progfun/src/main/scala/simulations"
dirs = filter(lambda dir: dir != "!SOLUTION" and dir != "!SCRATCHPAD" and dir != ".git" and dir != "README.md", os.listdir(root))
def is_dir_relevant(dir): return filter(lambda file: "output" in file, os.listdir(root + "/" + dir))
dirs = filter(is_dir_relevant, dirs)
dirs = []
blueprint_dir = root + "/!SOLUTION/src/main/scala/simulations"
interestings = ["Circuit.scala", "EpidemySimulator.scala"]
stubs = ["gui/EpidemyDisplay.scala", "gui/Grid.scala", "Simulator.scala"]

# print dirs
# print len(dirs)
# sys.exit(0)

# STEP 1: ESTABLISH THE BASELINE
# for dir in dirs:
#   if not os.path.exists(dir + "/gui"): os.mkdir(dir + "/gui")
#   for stub in stubs:
#     donnee = donnee_dir + "/" + stub
#     stub = root + "/" + dir + "/" + stub
#     check_call(["cp", donnee, stub])
#   for interesting in interestings:
#     donnee = donnee_dir + "/" + interesting
#     interesting = root + "/" + dir + "/" + interesting
#     check_call(["cp", donnee, interesting])

# STEP 2: EXTRACT THE SUBMISSIONS
# for dir in dirs:
#   stuff = filter(lambda file: "output" in file, os.listdir(root + "/" + dir))
#   if len(stuff) != 1:
#     print dir
#     sys.exit(1)
#   else:
#     if os.path.exists(backup_dir + "/" + dir):
#       check_call(["rm", "-rf", backup_dir + "/" + dir])
#       check_call(["mkdir", backup_dir + "/" + dir])
#     archive = stuff[0]
#     check_call(["unzip", "-o", root + "/" + dir + "/" + archive, "-d", root + "/" + dir + "/extracted"])
#     check_call(["mv", root + "/" + dir + "/" + archive, backup_dir + "/" + dir])
#     check_call(["cp", "-r", root + "/" + dir + "/extracted/simulations/gui", backup_dir + "/" + dir])
#     check_call(["cp", root + "/" + dir + "/extracted/simulations/Circuit.scala", backup_dir + "/" + dir])
#     check_call(["cp", root + "/" + dir + "/extracted/simulations/EpidemySimulator.scala", backup_dir + "/" + dir])
#     check_call(["cp", root + "/" + dir + "/extracted/simulations/Simulator.scala", backup_dir + "/" + dir])
#     check_call(["rm", "-rf", root + "/" + dir + "/extracted"])

# STEP 3: COPY THE SOLUTIONS
# for dir in dirs:
#   for interesting in interestings:
#     backup = backup_dir + "/" + dir + "/" + interesting
#     interesting = root + "/" + dir + "/" + interesting
#     check_call(["cp", backup, interesting])

# STEP 4: COMMIT THE SOLUTIONS
# for dir in dirs:
#   for interesting in interestings:
#     blueprint = blueprint_dir + "/" + interesting
#     interesting = dir + "/" + interesting
#     check_call(["git", "add", interesting])
#   check_call(["git", "commit", "-m", dir])

# STEP 5: GRADE THE SUBMISSIONS
if len(sys.argv) != 2: print "usage: " + sys.argv[0] + " <team name>"; sys.exit(1)
current_dir = root + "/" + sys.argv[1]

solution = root + "/!SOLUTION"
scratchpad = root + "/!SCRATCHPAD"
if os.path.exists(scratchpad): shutil.rmtree(scratchpad)
shutil.copytree(solution, scratchpad)
for interesting in interestings:
  student_solution = current_dir + "/" + interesting
  scratchpad_destination = scratchpad + "/src/main/scala/simulations/" + interesting
  check_call(["cp", student_solution, scratchpad_destination])
epidemy_display = scratchpad + "/gui/EpidemyDisplay.scala"

def set_flags(airplane_mode, reduced_mobility_mode, vaccination_mode):
  mode = "vanilla"
  if airplane_mode: mode = "airplane"
  if reduced_mobility_mode: mode = "reduced mobility"
  if vaccination_mode: mode = "vaccination"
  mode = mode.upper()
  for i in range(1, 10): print ""
  print mode
  print "==================="
  time.sleep(5)
  check_call(["sed", "-i", "", "-E", "s/\"Scaliosis - (.*)\"/\"Scaliosis - " + sys.argv[1].upper() + " - " + mode + "\"/g", "src/main/scala/simulations/gui/EpidemyDisplay.scala"], cwd = scratchpad)
  # check_call(["sed", "-i", "", "-E", "s/airplaneMode = (.*)/airplaneMode = " + str(airplane_mode).lower() + "/g", "src/main/scala/simulations/EpidemySimulator.scala"], cwd = scratchpad)
  # check_call(["sed", "-i", "", "-E", "s/reducedMobilityMode = (.*)/reducedMobilityMode = " + str(reduced_mobility_mode).lower() + "/g", "src/main/scala/simulations/EpidemySimulator.scala"], cwd = scratchpad)
  # check_call(["sed", "-i", "", "-E", "s/vaccinationMode = (.*)/vaccinationMode = " + str(vaccination_mode).lower() + "/g", "src/main/scala/simulations/EpidemySimulator.scala"], cwd = scratchpad)
  check_call(["subl", "-w", "src/main/scala/simulations/EpidemySimulator.scala"], cwd = scratchpad)

check_call(["bash", "-c", "sbt test"], cwd = scratchpad)

set_flags(airplane_mode = False, reduced_mobility_mode = False, vaccination_mode = False)
check_call(["bash", "-c", "echo 2 | sbt run"], cwd = scratchpad)

set_flags(airplane_mode = True, reduced_mobility_mode = False, vaccination_mode = False)
check_call(["bash", "-c", "echo 2 | sbt run"], cwd = scratchpad)

set_flags(airplane_mode = False, reduced_mobility_mode = True, vaccination_mode = False)
check_call(["bash", "-c", "echo 2 | sbt run"], cwd = scratchpad)

set_flags(airplane_mode = False, reduced_mobility_mode = False, vaccination_mode = True)
check_call(["bash", "-c", "echo 2 | sbt run"], cwd = scratchpad)
