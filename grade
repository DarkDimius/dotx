#!/usr/bin/env python
import sys, os, filecmp, difflib, shutil
from subprocess import check_call

root = "/Users/xeno_by/Projects/pp-2012-simulation-grades"
backup_dir = "/Users/xeno_by/Projects/pp-2012-blueprint"
donnee_dir = "/Users/xeno_by/Projects/progfun/src/main/scala/simulations"
dirs = filter(lambda dir: dir != "!SOLUTION" and dir != ".git" and dir != "README.md", os.listdir(root))
blueprint_dir = root + "/!SOLUTION/src/main/scala/simulations"
interestings = ["Circuit.scala", "EpidemySimulator.scala"]
stubs = ["gui/EpidemyDisplay.scala", "gui/Grid.scala", "Simulator.scala"]

# STEP 1: ESTABLISH THE BASELINE
# for dir in dirs:
#   for stub in stubs:
#     donnee = donnee_dir + "/" + stub
#     stub = dir + "/" + stub
#     check_call(["cp", donnee, stub])
#   for interesting in interestings:
#     donnee = donnee_dir + "/" + interesting
#     interesting = dir + "/" + interesting
#     check_call(["cp", donnee, interesting])

# STEP 2: COPY THE SOLUTIONS
# for dir in dirs:
#   for interesting in interestings:
#     blueprint = blueprint_dir + "/" + interesting
#     interesting = dir + "/" + interesting
#     check_call(["cp", blueprint, interesting])

# STEP 3: COMMIT THE SOLUTIONS
# for dir in dirs:
#   for interesting in interestings:
#     blueprint = blueprint_dir + "/" + interesting
#     interesting = dir + "/" + interesting
#     check_call(["git", "add", interesting])
#   check_call(["git", "commit", "-m", dir])

if len(sys.argv) != 2: sys.error("usage: " + sys.argv[0] + " <team name>")
current_dir = root + "/" + sys.argv[1]

solution = root + "/!SOLUTION"
scratchpad = root + "/!SCRATCHPAD"
if os.path.exists(scratchpad): shutil.rmtree(scratchpad)
shutil.copytree(solution, scratchpad)
for interesting in interestings:
  student_solution = current_dir + "/" + interesting
  scratchpad_destination = scratchpad + "/src/main/scala/simulations/" + interesting
  check_call(["cp", student_solution, scratchpad_destination])
epidemy_display = scratchpad + "/gui/EpidemyDisplay.scala"

def set_flags(airplane_mode, reduced_mobility_mode, vaccination_mode):
  mode = "vanilla"
  if airplane_mode: mode = "airplane"
  if reduced_mobility_mode: mode = "reduced mobility"
  if vaccination_mode: mode = "vaccination"
  mode = mode.upper()
  check_call(["sed", "-i", "", "-E", "s/\"Scaliosis - (.*)\"/\"Scaliosis - " + sys.argv[1].upper() + " - " + mode + "\"/g", "src/main/scala/simulations/gui/EpidemyDisplay.scala"], cwd = scratchpad)
  check_call(["sed", "-i", "", "-E", "s/airplaneMode = (.*)/airplaneMode = " + str(airplane_mode).lower() + "/g", "src/main/scala/simulations/EpidemySimulator.scala"], cwd = scratchpad)
  check_call(["sed", "-i", "", "-E", "s/reducedMobilityMode = (.*)/reducedMobilityMode = " + str(reduced_mobility_mode).lower() + "/g", "src/main/scala/simulations/EpidemySimulator.scala"], cwd = scratchpad)
  check_call(["sed", "-i", "", "-E", "s/vaccinationMode = (.*)/vaccinationMode = " + str(vaccination_mode).lower() + "/g", "src/main/scala/simulations/EpidemySimulator.scala"], cwd = scratchpad)

set_flags(airplane_mode = False, reduced_mobility_mode = False, vaccination_mode = False)
check_call(["bash", "-c", "echo 2 | sbt run"], cwd = scratchpad)

set_flags(airplane_mode = True, reduced_mobility_mode = False, vaccination_mode = False)
check_call(["bash", "-c", "echo 2 | sbt run"], cwd = scratchpad)

set_flags(airplane_mode = False, reduced_mobility_mode = True, vaccination_mode = False)
check_call(["bash", "-c", "echo 2 | sbt run"], cwd = scratchpad)

set_flags(airplane_mode = False, reduced_mobility_mode = False, vaccination_mode = True)
check_call(["bash", "-c", "echo 2 | sbt run"], cwd = scratchpad)





