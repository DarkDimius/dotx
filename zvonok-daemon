#!/usr/bin/env python
import os, sys, httplib2, imaplib, logging, webbrowser, email
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.file import Storage
logging.basicConfig()

def fail(): print("usage: " + sys.argv[0]); exit(1)
sys.argv = filter(lambda arg: not arg.startswith("--"), sys.argv)
if len(sys.argv) != 1: fail()

def dump_newmail_db(contents):
  prefix = os.path.expandvars("$GOOGLEMAIL_ALFRED")
  newmail_db_path = prefix + "_newmail"
  with open(newmail_db_path, 'w') as newmail_db:
    newmail_db.write(contents)

def dump_inbox_db(contents):
  prefix = os.path.expandvars("$GOOGLEMAIL_ALFRED")
  inbox_db_path = prefix + "_inbox"
  with open(inbox_db_path, 'w') as inbox_db:
    inbox_db.write(contents)

def get_auth_string():
  CLIENT_ID = open(os.path.expandvars("$GOOGLE_CLIENT_ID")).read().strip()
  CLIENT_SECRET = open(os.path.expandvars("$GOOGLE_CLIENT_SECRET")).read().strip()
  OAUTH_SCOPE = 'https://mail.google.com/'
  REDIRECT_URI = 'urn:ietf:wg:oauth:2.0:oob'
  flow = OAuth2WebServerFlow(CLIENT_ID, CLIENT_SECRET, OAUTH_SCOPE, REDIRECT_URI)
  storage = Storage(os.path.expandvars("$GOOGLEMAIL_OAUTH_STORAGE"))
  credentials = storage.get()
  if credentials:
    if credentials.access_token_expired: credentials.refresh(httplib2.Http())
    storage.put(credentials)
  else:
    webbrowser.open(flow.step1_get_authorize_url())
    OAUTH_CODE = raw_input("Enter the code provided on the web page: ")
    credentials = flow.step2_exchange(OAUTH_CODE)
    storage.put(credentials)
  return 'user=%s\1auth=Bearer %s\1\1' % (os.path.expandvars("$GOOGLEMAIL_USERNAME"), credentials.access_token)

def approximate_body(body):
  return body

mail = imaplib.IMAP4_SSL('imap.gmail.com')
mail.debug = 4 # VERY USEFUL!
mail.authenticate('XOAUTH2', lambda x: get_auth_string())
mail.select('INBOX')
typ, data = mail.search(None, 'ALL')
messages = []
for id in reversed(data[0].split()):
  typ, data = mail.fetch(id, '(BODY.PEEK[])')
  for response_part in data:
    if isinstance(response_part, tuple):
      msg = email.message_from_string(response_part[1])
      subject = msg['subject']
      sender = msg['from']
      body = ""
      if msg.is_multipart():
        for payload in msg.get_payload():
          body += payload.get_payload()
      else:
        body += payload.get_payload()
      messages.append(dict(subject = subject, sender = sender, body = approximate_body(body)))
