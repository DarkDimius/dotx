#!/usr/bin/env python
import os, sys, subprocess, re, time, glob
from subprocess import check_output, call, check_call, Popen, PIPE

all = "--all" in sys.argv
verbose = "--verbose" in sys.argv
sys.argv = filter(lambda arg: not arg.startswith("-"), sys.argv)

root = subprocess.Popen(["scala-root"], stdout=subprocess.PIPE).communicate()[0][:-1]
cwd = os.path.abspath(".")
if not cwd.startswith(root) and not "/Paradise" in cwd:
  print "not at scala root"
  sys.exit(1)

bin = root + "/test/partest"
dotpartest = root + "/.partest"
dotpartestlog = root + "/.partestlog"

if not os.path.exists(bin):
  print bin + " does not exist"
  sys.exit(1)

def explode_urls(filename):
  if filename.startswith("http"): return subprocess.Popen(["jenkins-failures", filename], stdout=subprocess.PIPE).communicate()[0].splitlines()
  else: return [filename]
def strip_trailing_slash(filename):
  return filename[:-1] if filename.endswith("/") else filename
def strip_leading_slash(filename):
  return filename[1:] if filename.startswith("/") else filename
tests = sys.argv[1:]
tests = list([test for tests in map(explode_urls, tests) for test in tests])
tests = map(strip_leading_slash, map(strip_trailing_slash, tests))
if all:
  if tests:
    print "can't provide any tests when --all is specified"
    sys.exit(1)
else:
  if not tests and os.path.exists(dotpartest):
    tests = subprocess.Popen(["partest-suite", "--view"], stdout=subprocess.PIPE, cwd = root).communicate()[0].splitlines()
  if not tests:
    print "no tests in " + dotpartest
    sys.exit(1)

def update_dotpartest():
  with open(dotpartestlog, "r") as log:
    lines = map(lambda test: test.strip(), log.readlines())
  lines = map(strip_trailing_slash, lines)
  lines = filter(lambda test: not "*" in test, lines)
  successes = []
  failures = []
  for line in lines:
    def fullname_from_match(m):
      test = m.group(1)
      if not test.startswith("/"): test = "/" + test
      if test.startswith(root + "/test/files"): test = test[len(root + "/test/files"):]
      if test.startswith("/files"): test = test[len("/files"):]
      if test.startswith("/"): test = test[1:]
      return test
    m1 = re.match(r"^testing: \[\.\.\.\](.*?)\s*\[FAILED\]\s*$", line) # 2.10.x partest
    m2 = re.match(r"^Possible compiler crash during test of: (.*?)$", line) # 2.10.x partest
    m3 = re.match(r"^(?:.*?)!!(?:.*?)\s+\d+ - (.*?) .*$", line) # master partest
    m = m1 or m2 or m3
    if m: failures.append(fullname_from_match(m))
    m1 = re.match(r"^testing: \[\.\.\.\](.*?)\s*\[  OK  \]\s*$", line) # 2.10.x partest
    m2 = re.match(r"^(?:.*?)ok(?:.*?)\s+\d+ - (.*)$", line) # master partest
    m = m1 or m2
    if m: successes.append(fullname_from_match(m))
  global tests
  tests = filter(lambda test: not "*" in test, tests)
  for failure in failures:
    if not failure in tests:
      tests.append(failure)
  for success in successes:
    if success in tests:
      tests.remove(success)
  lines = []
  if os.path.exists(dotpartest):
    with open(dotpartest, "r") as config:
      lines = map(lambda line: line.strip(), config.readlines())
  def comment_out(line):
    return "# " + line if line.strip() else line
  lines = map(comment_out, lines)
  if len(lines): lines = lines + [""]
  lines += ["# created after running partest"]
  lines += ["# timestamp: " + time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())]
  lines += tests
  with open(dotpartest, "w") as config:
    config.writelines(map(lambda line: line + "\n", lines))

def completion_stamps(tier):
  if tier == "pack": return map(lambda project: root + "/build/pack/lib/scala-" + project + ".jar", ["library", "reflect", "compiler"])
  else: return map(lambda project: root + "/build/" + tier + "/" + project + ".complete", ["library", "reflect", "compiler"])
def last_mod(files):
  files = files if type(files) == list else [files]
  return max(map(lambda f: os.path.getmtime(f) if os.path.exists(f) else 0, files))
locker_time = last_mod(completion_stamps("locker"))
quick_time = last_mod(completion_stamps("quick"))
bin_time = last_mod(completion_stamps("pack"))
if locker_time > quick_time or quick_time > bin_time or bin_time == 0:
  try:
    exitcode = subprocess.call(["ant"], cwd = root)
    if exitcode != 0: sys.exit(exitcode)
  except KeyboardInterrupt:
    sys.exit(1)

try:
  scalac_flags = check_output(["partest-options"]).strip().split("\n")
  partest_flags = ["--verbose"] if verbose else []
  os.environ["SCALAC_OPTS"] = " ".join(scalac_flags)
  invocation = " ".join([bin] + partest_flags + map(lambda test: "files/" + test, tests))
  if not tests: invocation += " --all"
  invocation += " | tee " + dotpartestlog
  subprocess.call([os.environ["SHELL"], "-c", invocation], cwd = root + "/test")
  update_dotpartest()
except KeyboardInterrupt:
  update_dotpartest()
