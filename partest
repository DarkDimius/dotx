#!/usr/bin/env python
import os, sys, subprocess, re, time

all = "--all" in sys.argv
sys.argv = filter(lambda arg: not arg.startswith("-"), sys.argv)

root = subprocess.Popen(["scala-root"], stdout=subprocess.PIPE).communicate()[0][:-1]
bin = root + "/test/partest"
dotpartest = root + "/.partest"
dotpartestlog = root + "/.partestlog"

if not os.path.exists(bin):
  print bin + " does not exist"
  sys.exit(1)

def strip_trailing_slash(filename):
  return filename[:-1] if filename.endswith("/") else filename
tests = map(strip_trailing_slash, sys.argv[1:])
if all:
  if tests:
    print "can't provide any tests when --all is specified"
    sys.exit(1)
else:
  if not tests and os.path.exists(dotpartest):
    tests = subprocess.Popen(["partest-suite", "--view"], stdout=subprocess.PIPE, cwd = root).communicate()[0].splitlines()
  if not tests:
    print "No tests in " + dotpartest
    sys.exit(1)

def update_dotpartest():
  with open(dotpartestlog, "r") as log:
    lines = map(lambda test: test.strip(), log.readlines())
  lines = map(strip_trailing_slash, lines)
  lines = filter(lambda test: not "*" in test, lines)
  successes = []
  failures = []
  for line in lines:
    m1 = re.match(r"^testing: \[\.\.\.\](.*?)\s*\[FAILED\]\s*$", line)
    m2 = re.match(r"^Possible compiler crash during test of: (.*?)$", line)
    m = m1 or m2
    if m:
      test = m.group(1)
      if not test.startswith("/"): test = "/" + test
      if not test.startswith("/files"): test = "/files" + test
      if test.startswith("/"): test = test[1:]
      failures.append(test)
    m = re.match(r"^testing: \[\.\.\.\](.*?)\s*\[  OK  \]\s*$", line)
    if m:
      test = m.group(1)
      if not test.startswith("/"): test = "/" + test
      if not test.startswith("/files"): test = "/files" + test
      if test.startswith("/"): test = test[1:]
      successes.append(test)
  global tests
  tests = filter(lambda test: not "*" in test, tests)
  for failure in failures:
    if not failure in tests:
      tests.append(failure)
  for success in successes:
    if success in tests:
      tests.remove(success)
  lines = []
  if os.path.exists(dotpartest):
    with open(dotpartest, "r") as config:
      lines = map(lambda line: line.strip(), config.readlines())
  def comment_out(line):
    return "# " + line if line.strip() else line
  lines = map(comment_out, lines)
  if len(lines): lines = lines + [""]
  lines += ["# created after running partest"]
  lines += ["# timestamp: " + time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())]
  lines += tests
  with open(dotpartest, "w") as config:
    config.writelines(map(lambda line: line + "\n", lines))

def completion_stamps(tier):
  return map(lambda project: root + "/build/" + tier + "/" + project + ".complete", ["library", "reflect", "compiler"])
def last_mod(files):
  files = files if type(files) == list else [files]
  return max(map(lambda f: os.path.getmtime(f) if os.path.exists(f) else 0, files))
locker_time = last_mod(completion_stamps("locker"))
quick_time = last_mod(completion_stamps("quick"))
bin_time = last_mod(root + "/build/pack/bin.complete")
if locker_time > quick_time or quick_time > bin_time or bin_time == 0:
  try:
    exitcode = subprocess.call(["ant"], cwd = root)
    if exitcode != 0: sys.exit(exitcode)
  except KeyboardInterrupt:
    sys.exit(1)

try:
  invocation = " ".join([bin] + tests)
  if not tests: invocation += " --all"
  invocation += " | tee " + dotpartestlog
  subprocess.call([os.environ["SHELL"], "-c", invocation], cwd = root + "/test")
  update_dotpartest()
except KeyboardInterrupt:
  update_dotpartest()
