#!/usr/bin/env python
import os, sys, time
from subprocess import Popen, PIPE, call

def check_comm(*args, **kwargs):
  kwargs["stdout"] = PIPE
  kwargs["stderr"] = PIPE
  child = Popen(*args, **kwargs)
  stdout, stderr = child.communicate()
  if child.returncode != 0: raise Exception(stderr.strip())
  return stdout.splitlines()

retry = "--retry" in sys.argv
sys.argv = filter(lambda arg: not arg.startswith("--"), sys.argv)
if len(sys.argv) != 2:
  print >> sys.stderr, "usage: " + sys.argv[0] + " <project>"
  sys.exit(1)

project = sys.argv[1]
if not project.endswith(".sublime-project"):
  project = project + ".sublime-project"
if not os.path.exists(project) and not "/" in project:
  std_project_folder = os.path.expandvars("$HOME/Library/Application Support/Sublime Text 3/Projects")
  project = os.path.join(std_project_folder, project)
if not os.path.exists(project):
  print >> sys.stderr, "Cannot open project file: " + project
  sys.exit(1)

dotsublime = os.path.expandvars("$HOME/.sublime")
with open(dotsublime, "w") as f: f.write(project + "\n" + "OPEN?")
check_comm(["subl", "--command", "my_open_project"])
def project_is_open():
  def loop(retries_left):
    with open(dotsublime, "r") as f:
      text = f.read().decode()
      yep, nope = text == "YEP", text == "NOPE"
      if yep or nope:
        print "got status report from Sublime: " + str(text)
        return yep
      else:
        time.sleep(0.1)
        if retries_left: return loop(retries_left - 1)
        else: print "didn't get a status report from Sublime"; return None
  return loop(3)
status = project_is_open()
if status == True:
  print "project is open, making it focused"
  with open(dotsublime, "w") as f: f.write(project + "\n" + "FOCUS!")
  check_comm(["subl", "--command", "my_open_project"])
  check_comm(["subl", "--command", "my_open_project"]) # repeat again, somehow sublime doesn't switch to the focused window on the first go
elif status == False:
  print "project not open, running subl --project"
  check_comm(["subl", "--project", project])
elif status == None:
  if retry:
    print "tried retrying, but it failed to work again"
  else:
    print "retrying the hack, because Sublime didn't respond to the previous one"
    call(["subl-open-project", project, "--retry"]) # don't know why, but it helps
