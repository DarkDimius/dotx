#!/usr/bin/env python
import re, json, operator

data = json.load(open("data.json"))
print len(data)

infractions = {}
for datum in data:
  if datum["path"]:
    team = datum["path"].split("/")[0]
    problem = datum["path"].split("/")[1]
    comment = datum["body"].strip()
    if comment.startswith("["):
      m = re.match("^\[(.*)\] (.*)$", comment)
      if not m:
        print team, comment
      else:
        allowed_flavors = ["smell", "clarity", "spec", "SMELL", "CLARITY", "SPEC"]
        allowed_problems = ["Circuit.scala", "EpidemySimulator.scala"]
        flavor = m.group(1)
        score = 1 if flavor[0].islower() else 2
        flavor = flavor.lower()
        team_infractions = infractions[team] = infractions.get(team) or {}
        problem_infractions = team_infractions[problem] = team_infractions.get(problem) or {}
        problem_infractions[flavor] = problem_infractions.get(flavor) or 0
        problem_infractions[flavor] += score
        if not flavor in allowed_flavors:
          print team, problem, comment
        if not problem in allowed_problems:
          print team, problem, comment

print infractions
print "================="

scores = {}
max_infractions = 3
for team, team_infractions in infractions.iteritems():
  def calc(max_spec, max_clarity, max_smell, infractions):
    infractions = infractions or {}
    spec = max_spec * (max_infractions - min(infractions.get("spec") or 0, max_infractions)) / max_infractions
    clarity = max_clarity * (max_infractions - min(infractions.get("clarity") or 0, max_infractions)) / max_infractions
    smell = max_smell * (max_infractions - min(infractions.get("smell") or 0, max_infractions)) / max_infractions
    return spec + clarity + smell
  circuit = calc(3.0, 3.0, 2.0, team_infractions.get("Circuit.scala"))
  simulator = calc(5.0, 4.0, 3.0, team_infractions.get("EpidemySimulator.scala"))
  if team == "Kobe" or team == "Cedrati": simulator = 0
  score = int(round(circuit + simulator))
  scores[team] = score

scores["Rxxxxxxi"] = 20
scores["Kxxxxxxxr"] = 20
score = sorted(scores.iteritems(), key=operator.itemgetter(1))
for k, v in score: print k, v
print "total: " + str(len(score))